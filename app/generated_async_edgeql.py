# AUTOGENERATED FROM:
#     'app/queries/create_job.edgeql'
#     'app/queries/get_job_by_id.edgeql'
#     'app/queries/get_jobs.edgeql'
#     'app/queries/update_job.edgeql'
# WITH:
#     $ edgedb-py --file


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateJobResult(NoPydanticValidation):
    id: uuid.UUID
    created_at: datetime.datetime


@dataclasses.dataclass
class GetJobByIdResult(NoPydanticValidation):
    id: uuid.UUID
    threads: int | None
    in_progress: bool | None
    completed: bool | None
    input_urls: str | None
    image_urls: str | None
    created_at: datetime.datetime


@dataclasses.dataclass
class UpdateJobResult(NoPydanticValidation):
    id: uuid.UUID


async def create_job(
    executor: edgedb.AsyncIOExecutor,
    *,
    threads: int,
    in_progress: bool,
    completed: bool,
    input_urls: str,
    image_urls: str,
) -> CreateJobResult:
    return await executor.query_single(
        """\
        select (insert Job {
            threads := <int16>$threads,
            in_progress := <bool>$in_progress,
            completed := <bool>$completed,
            input_urls := <json>$input_urls,
            image_urls := <json>$image_urls
        }) {
            id,
            created_at
        };\
        """,
        threads=threads,
        in_progress=in_progress,
        completed=completed,
        input_urls=input_urls,
        image_urls=image_urls,
    )


async def get_job_by_id(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> GetJobByIdResult | None:
    return await executor.query_single(
        """\
        select Job {id, threads, in_progress, completed, input_urls, image_urls, created_at}
        filter Job.id = <uuid>$id\
        """,
        id=id,
    )


async def get_jobs(
    executor: edgedb.AsyncIOExecutor,
) -> list[CreateJobResult]:
    return await executor.query(
        """\
        select Job {id, created_at};\
        """,
    )


async def update_job(
    executor: edgedb.AsyncIOExecutor,
    *,
    id: uuid.UUID,
    image_urls: str,
) -> UpdateJobResult | None:
    return await executor.query_single(
        """\
        update Job
        filter Job.id = <uuid>$id
        set {
            image_urls := <json>$image_urls
        };\
        """,
        id=id,
        image_urls=image_urls,
    )
